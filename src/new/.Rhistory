model <- knn(train, test, cl,k=100,prob = T);
detach("package:class", unload=TRUE)
library("class", lib.loc="C:/Program Files/R/R-3.2.2/library")
library(class)
train = lernData[1:140000,c(11:17,25:31)]
test = lernData[140001:(nrow(lernData)),c(11:17,25:31)]
cl = factor(lernData[1:140000,5])
model <- knn(train, test, cl,k=100,prob = T);
model <- knn(train, test, cl,k=10,prob = T);
library(class)
train = lernData[1:100000,c(11:17,25:31)]
test = lernData[100001:110000,c(11:17,25:31)]
cl = factor(lernData[1:100000,5])
model <- knn(train, test, cl,k=10,prob = T);
train = lernData[1:100000,c(3,11:17,25:31)]
test = lernData[100001:110000,c(3,11:17,25:31)]
cl = factor(lernData[1:100000,5])
model <- knn(train, test, cl,k=10,prob = T);
targ = lernData[100001:110000,5]
pred = attr(model,"prob")
pred = ifelse(pred<0.90,1,0)
sum(targ[pred==targ & targ==1])
sum(targ[pred!=targ & targ==1])
sum(pred[pred!=targ & targ==0])
model <- knn(train, test, cl,k=100,prob = T);
targ = lernData[100001:110000,5]
pred = attr(model,"prob")
pred = ifelse(pred<0.90,1,0)
sum(targ[pred==targ & targ==1])
sum(targ[pred!=targ & targ==1])
sum(pred[pred!=targ & targ==0])
b=compute(model, lernData[c("price_real","shipping_real","publish6","publish7","publish8","publish9","publish10","publish11","publish12","view6","view7","view8","view9","view10","view11","view12")])$net.result;
pred = attr(model,"prob")
pred = ifelse(pred<0.99,1,0)
sum(targ[pred==targ & targ==1])
sum(targ[pred!=targ & targ==1])
sum(pred[pred!=targ & targ==0])
lernData = lernData[sample(nrow(lernData)),]
library(class)
train = lernData[1:100000,c(3,11:17,25:31)]
test = lernData[100001:110000,c(3,11:17,25:31)]
cl = factor(lernData[1:100000,5])
model <- knn(train, test, cl,k=100,prob = T);
targ = lernData[100001:110000,5]
pred = attr(model,"prob")
pred = ifelse(pred<0.99,1,0)
sum(targ[pred==targ & targ==1])
sum(targ[pred!=targ & targ==1])
sum(pred[pred!=targ & targ==0])
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("AppliedPredictiveModeling")
library("AppliedPredictiveModeling", lib.loc="~/R/win-library/3.2")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("caret")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)
library("caret", lib.loc="~/R/win-library/3.2")
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)
fix(mixtures)
plot(CompressiveStrength)
plot(mixtures$CompressiveStrength)
plot(mixtures$CompressiveStrength col = 1:length(mixtures$CompressiveStrength))
gplot(mixtures$CompressiveStrength col = 1:length(mixtures$CompressiveStrength))
qplot(mixtures$CompressiveStrength col = 1:length(mixtures$CompressiveStrength))
qplot(mixtures$CompressiveStrength,col = 1:length(mixtures$CompressiveStrength))
plot(mixtures$CompressiveStrength,col = 1:length(mixtures$CompressiveStrength))
plot(mixtures$CompressiveStrength,col = mixtures$FlyAshr)
fix(mixtures)
hist(mixtures$Superplasticizer)
testing = adData[-inTrain,]
library(caret)
detach("package:caret", unload=TRUE)
library("caret", lib.loc="~/R/win-library/3.2")
install.packages("installr") # Устанавливаем пакет из репозитория
library(installr) # Загружаем его
updateR()
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
install.packages("installr") # Устанавливаем пакет из репозитория
library(installr) # Загружаем его
updateR()
install.packages("installr")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
updateR()
library(installr) # Загружаем его
install.packages("installr") # Устанавливаем пакет из репозитория
install.packages("installr")
library(installr) # Загружаем его
updateR()
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
fix(mixtures)
# stopDaemonizedServer(server)
library(httpuv)
library(Rook)
library(jsonlite)
# считываес параметры с консоля
args <- commandArgs(trailingOnly = T);
# считываем путь у config
confFile = "C:\\Users\\Dima Guk\\Documents\\bigdata\\res\\";
# считываем config
config <- read.table(paste(confFile,"config.csv",sep = ""), sep = ",",header = T);
# считываем текущую директорию с config
myDir = as.character(config[1,6]);
# устанавливаем директорию
setwd(myDir);
# запускаем скрипт с функциями считывания таблиц
source("readData.R");
# скрипты которые возвращают данные для построения графиков
source("plotPublishPrice.R")
source("plotSoldPrice.R")
source("plotProbPrice.R")
source("plotProfPrice.R")
source("plotPublishDay.R")
source("plotSoldDay.R")
source("plotProbDay.R")
source("plotCreatedDay.R")
source("plotPublishTime.R")
source("plotSoldTime.R")
source("plotProbTime.R")
source("plotCreatedTime.R")
source("tableCategoryID.R")
source("tableCategoryPrice.R")
# функция которая определят какой скрипт запускать по названию и возвращает нужные данные
getData <- function(name,brand,CategoryID,begDate,endDate)
{
if(name == "plotPublishPrice")
{
return(publishPrice(brand,CategoryID,begDate,endDate))
}
if(name == "plotSoldPrice")
{
return(soldPrice(brand,CategoryID,begDate,endDate))
}
if(name == "plotProbPrice")
{
return(probPrice(brand,CategoryID,begDate,endDate))
}
if(name == "plotProfPrice")
{
return(profPrice(brand,CategoryID,begDate,endDate))
}
if(name == "plotPublishDay")
{
return(publishDay(brand,CategoryID,begDate,endDate))
}
if(name == "plotSoldDay")
{
return(soldDay(brand,CategoryID,begDate,endDate))
}
if(name == "plotProbDay")
{
return(probDay(brand,CategoryID,begDate,endDate))
}
if(name == "plotCreatedDay")
{
return(createdDay(brand,CategoryID,begDate,endDate))
}
if(name == "plotPublishTime")
{
return(publishTime(brand,CategoryID, begDate, endDate))
}
if(name == "plotSoldTime")
{
return(soldTime(brand,CategoryID,begDate,endDate))
}
if(name == "plotProbTime")
{
return(probTime(brand,CategoryID,begDate, endDate))
}
if(name == "plotCreatedTime")
{
return(createdTime(brand,CategoryID, begDate,endDate))
}
if(name == "tableCategory")
{
return(tableCategory(brand,CategoryID, begDate, endDate))
}
if(name == "tableCategoryPrice")
{
return(tableCategoryPrice(brand,CategoryID,begDate,endDate))
}
}
.lastMessage <- NULL
app <- list(
call = function(req) {
wsUrl = paste(sep='',
'"',
"ws://",
ifelse(is.null(req$HTTP_HOST), req$SERVER_NAME, req$HTTP_HOST),
'"')
reqq=Request$new(req)
name = reqq$GET()[1];
brand = reqq$GET()[2];
CategoryID = reqq$GET()[3];
begDate = reqq$GET()[4];
endDate = reqq$GET()[5];
begDate = ifelse(begDate!="NA", paste(" and publish.add_date > '", begDate,"'",sep=""),"");
endDate = ifelse(endDate!="NA", paste(" and publish.add_date < '", endDate,"'",sep=""),"");
CategoryID = ifelse(CategoryID!="NA", paste(" and products.ebaycategory_id = ", CategoryID, sep = ""), "");
brand = ifelse(brand!="NA", paste( " and products.brand = ",brand, sep = ""), "");
returnData = getData(name,brand,CategoryID,begDate,endDate)
list(
status = 200L,
headers = list(
'Content-Type' = 'text/json'
),
body = paste('<h1>',toJSON(returnData),'</h1>')
)
}
)
server <- startDaemonizedServer("0.0.0.0", 9454, app)
stopDaemonizedServer(server)
# stopDaemonizedServer(server)
library(httpuv)
library(Rook)
library(jsonlite)
# считываес параметры с консоля
args <- commandArgs(trailingOnly = T);
# считываем путь у config
confFile = "C:\\Users\\Dima Guk\\Documents\\bigdata\\res\\";
# считываем config
config <- read.table(paste(confFile,"config.csv",sep = ""), sep = ",",header = T);
# считываем текущую директорию с config
myDir = as.character(config[1,6]);
# устанавливаем директорию
setwd(myDir);
# запускаем скрипт с функциями считывания таблиц
source("readData.R");
# скрипты которые возвращают данные для построения графиков
source("plotPublishPrice.R")
source("plotSoldPrice.R")
source("plotProbPrice.R")
source("plotProfPrice.R")
source("plotPublishDay.R")
source("plotSoldDay.R")
source("plotProbDay.R")
source("plotCreatedDay.R")
source("plotPublishTime.R")
source("plotSoldTime.R")
source("plotProbTime.R")
source("plotCreatedTime.R")
source("tableCategoryID.R")
source("tableCategoryPrice.R")
source("tableProduct.R")
# функция которая определят какой скрипт запускать по названию и возвращает нужные данные
getData <- function(name,brand,CategoryID,begDate,endDate)
{
if(name == "plotPublishPrice")
{
return(publishPrice(brand,CategoryID,begDate,endDate))
}
if(name == "plotSoldPrice")
{
return(soldPrice(brand,CategoryID,begDate,endDate))
}
if(name == "plotProbPrice")
{
return(probPrice(brand,CategoryID,begDate,endDate))
}
if(name == "plotProfPrice")
{
return(profPrice(brand,CategoryID,begDate,endDate))
}
if(name == "plotPublishDay")
{
return(publishDay(brand,CategoryID,begDate,endDate))
}
if(name == "plotSoldDay")
{
return(soldDay(brand,CategoryID,begDate,endDate))
}
if(name == "plotProbDay")
{
return(probDay(brand,CategoryID,begDate,endDate))
}
if(name == "plotCreatedDay")
{
return(createdDay(brand,CategoryID,begDate,endDate))
}
if(name == "plotPublishTime")
{
return(publishTime(brand,CategoryID, begDate, endDate))
}
if(name == "plotSoldTime")
{
return(soldTime(brand,CategoryID,begDate,endDate))
}
if(name == "plotProbTime")
{
return(probTime(brand,CategoryID,begDate, endDate))
}
if(name == "plotCreatedTime")
{
return(createdTime(brand,CategoryID, begDate,endDate))
}
if(name == "tableCategory")
{
return(tableCategory(brand,CategoryID, begDate, endDate))
}
if(name == "tableCategoryPrice")
{
return(tableCategoryPrice(brand,CategoryID,begDate,endDate))
}
if(name == "tableProduct")
{
return(tableProduct(brand,CategoryID,begDate,endDate))
}
}
.lastMessage <- NULL
app <- list(
call = function(req) {
wsUrl = paste(sep='',
'"',
"ws://",
ifelse(is.null(req$HTTP_HOST), req$SERVER_NAME, req$HTTP_HOST),
'"')
reqq=Request$new(req)
name = reqq$GET()[1];
brand = reqq$GET()[2];
CategoryID = reqq$GET()[3];
begDate = reqq$GET()[4];
endDate = reqq$GET()[5];
begDate = ifelse(begDate!="NA", paste(" and publish.add_date > '", begDate,"'",sep=""),"");
endDate = ifelse(endDate!="NA", paste(" and publish.add_date < '", endDate,"'",sep=""),"");
CategoryID = ifelse(CategoryID!="NA", paste(" and products.ebaycategory_id = ", CategoryID, sep = ""), "");
brand = ifelse(brand!="NA", paste( " and products.brand = ",brand, sep = ""), "");
returnData = getData(name,brand,CategoryID,begDate,endDate)
list(
status = 200L,
headers = list(
'Content-Type' = 'text/json'
),
body = paste('<h1>',toJSON(returnData),'</h1>')
)
}
)
server <- startDaemonizedServer("0.0.0.0", 9454, app)
stopDaemonizedServer(server)
# stopDaemonizedServer(server)
library(httpuv)
library(Rook)
library(jsonlite)
# считываес параметры с консоля
args <- commandArgs(trailingOnly = T);
# считываем путь у config
confFile = "C:\\Users\\Dima Guk\\Documents\\bigdata\\res\\";
# считываем config
config <- read.table(paste(confFile,"config.csv",sep = ""), sep = ",",header = T);
# считываем текущую директорию с config
myDir = as.character(config[1,6]);
# устанавливаем директорию
setwd(myDir);
# запускаем скрипт с функциями считывания таблиц
source("readData.R");
# скрипты которые возвращают данные для построения графиков
source("plotPublishPrice.R")
source("plotSoldPrice.R")
source("plotProbPrice.R")
source("plotProfPrice.R")
source("plotPublishDay.R")
source("plotSoldDay.R")
source("plotProbDay.R")
source("plotCreatedDay.R")
source("plotPublishTime.R")
source("plotSoldTime.R")
source("plotProbTime.R")
source("plotCreatedTime.R")
source("tableCategoryID.R")
source("tableCategoryPrice.R")
source("tableProduct.R")
# функция которая определят какой скрипт запускать по названию и возвращает нужные данные
getData <- function(name,brand,CategoryID,begDate,endDate)
{
if(name == "plotPublishPrice")
{
return(publishPrice(brand,CategoryID,begDate,endDate))
}
if(name == "plotSoldPrice")
{
return(soldPrice(brand,CategoryID,begDate,endDate))
}
if(name == "plotProbPrice")
{
return(probPrice(brand,CategoryID,begDate,endDate))
}
if(name == "plotProfPrice")
{
return(profPrice(brand,CategoryID,begDate,endDate))
}
if(name == "plotPublishDay")
{
return(publishDay(brand,CategoryID,begDate,endDate))
}
if(name == "plotSoldDay")
{
return(soldDay(brand,CategoryID,begDate,endDate))
}
if(name == "plotProbDay")
{
return(probDay(brand,CategoryID,begDate,endDate))
}
if(name == "plotCreatedDay")
{
return(createdDay(brand,CategoryID,begDate,endDate))
}
if(name == "plotPublishTime")
{
return(publishTime(brand,CategoryID, begDate, endDate))
}
if(name == "plotSoldTime")
{
return(soldTime(brand,CategoryID,begDate,endDate))
}
if(name == "plotProbTime")
{
return(probTime(brand,CategoryID,begDate, endDate))
}
if(name == "plotCreatedTime")
{
return(createdTime(brand,CategoryID, begDate,endDate))
}
if(name == "tableCategory")
{
return(tableCategory(brand,CategoryID, begDate, endDate))
}
if(name == "tableCategoryPrice")
{
return(tableCategoryPrice(brand,CategoryID,begDate,endDate))
}
if(name == "tableProduct")
{
return(tableProduct(brand,CategoryID,begDate,endDate))
}
}
.lastMessage <- NULL
app <- list(
call = function(req) {
wsUrl = paste(sep='',
'"',
"ws://",
ifelse(is.null(req$HTTP_HOST), req$SERVER_NAME, req$HTTP_HOST),
'"')
reqq=Request$new(req)
name = reqq$GET()[1];
brand = reqq$GET()[2];
CategoryID = reqq$GET()[3];
begDate = reqq$GET()[4];
endDate = reqq$GET()[5];
begDate = ifelse(begDate!="NA", paste(" and publish.add_date > '", begDate,"'",sep=""),"");
endDate = ifelse(endDate!="NA", paste(" and publish.add_date < '", endDate,"'",sep=""),"");
CategoryID = ifelse(CategoryID!="NA", paste(" and products.ebaycategory_id = ", CategoryID, sep = ""), "");
brand = ifelse(brand!="NA", paste( " and products.brand = ",brand, sep = ""), "");
returnData = getData(name,brand,CategoryID,begDate,endDate)
list(
status = 200L,
headers = list(
'Content-Type' = 'text/json'
),
body = paste('<h1>',toJSON(returnData),'</h1>')
)
}
)
server <- startDaemonizedServer("0.0.0.0", 9454, app)
